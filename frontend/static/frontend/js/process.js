import{ag as f,ah as h,al as d,am as y}from"./index.js";const w=f("process",{state:()=>({processes:[],dataLoaded:!1}),getters:{processById:e=>a=>e.processes.find(s=>s.id==a),processesWithClosedStatus:e=>e.processes.filter(a=>{const s=a.stages[a.stages.length-1];return s&&s.status==="Fallo"}),processesWithoutClosedStatus:e=>e.processes.filter(a=>{const s=a.stages[a.stages.length-1];return s&&s.status!=="Fallo"})},actions:{async init(){this.dataLoaded||await this.fetchProcessesData()},async fetchProcessesData(){if(!this.dataLoaded)try{let a=(await h("processes/")).data;if(a&&typeof a=="string")try{a=JSON.parse(a)}catch(s){console.error("JSON parse error:",s.message),a=[]}this.processes=a??[],this.dataLoaded=!0}catch(e){console.error("Error fetching processes data:",e.message),this.processes=[],this.dataLoaded=!1}},filteredProcesses(e,a,s,t){let r=this.processes;if(t=="history"?r=this.processesWithClosedStatus:r=this.processesWithoutClosedStatus,s&&(a?r=r.filter(c=>c.client.id==s):r=r.filter(c=>c.lawyer.id==s)),!e)return r;const o=e.toLowerCase();return r.filter(c=>{const i=["plaintiff","defendant","authority","ref","subcase"].some(l=>{var n;return(n=c[l])==null?void 0:n.toLowerCase().includes(o)}),u=c.case.type.toLowerCase().includes(o),p=c.stages.some(l=>l.status.toLowerCase().includes(o));return i||u||p})},async createProcess(e){const a={plaintiff:e.plaintiff,defendant:e.defendant,caseTypeId:e.caseTypeId,subcase:e.subcase,ref:e.ref,authority:e.authority,clientId:e.clientId,lawyerId:e.lawyerId,stages:e.stages},s=new FormData;s.append("mainData",JSON.stringify(a));try{const t=await d("create_process/",s);if(t.status===201){const r=t.data.id;if(e.caseFiles.length>0){const o=await this.uploadFiles(r,e.caseFiles);o.every(i=>i.success)||console.warn("Some files failed to upload:",o.filter(i=>!i.success))}return this.dataLoaded=!1,await this.fetchProcessesData(),t.status}else return console.error("Failed to create process:",t.status),null}catch(t){return console.error("Error creating process:",t.message),null}},async updateProcess(e){const a={plaintiff:e.plaintiff,defendant:e.defendant,caseTypeId:e.caseTypeId,subcase:e.subcase,ref:e.ref,authority:e.authority,clientId:e.clientId,lawyerId:e.lawyerId,stages:e.stages,caseFileIds:e.caseFiles.filter(t=>t.id).map(t=>t.id)},s=new FormData;s.append("mainData",JSON.stringify(a));try{const t=await y(`update_process/${e.processIdParam}/`,s);if(t.status===200){const r=e.caseFiles.filter(o=>o.file&&!o.id);if(r.length>0){const o=await this.uploadFiles(e.processIdParam,r);o.every(i=>i.success)||console.warn("Some files failed to upload:",o.filter(i=>!i.success))}return this.dataLoaded=!1,await this.fetchProcessesData(),t.status}else return console.error("Failed to update process:",t.status),null}catch(t){return console.error("Error updating process:",t.message),null}},async uploadFiles(e,a){const s=[];for(const t of a)try{const r=new FormData;r.append("file",t.file),r.append("processId",e);const o=await d("update_case_file/",r);s.push({file:t.file.name,success:o.status===201})}catch(r){console.error(`Error uploading file ${t.file.name}:`,r.message),s.push({file:t.file.name,success:!1})}return s}}});export{w as u};
